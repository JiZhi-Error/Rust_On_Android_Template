plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'org.mozilla.rust-android-gradle.rust-android'
    id 'stringfog'
}
android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    ndkVersion "22.0.7026061"

    defaultConfig {
        applicationId "com.jizhi.rustonandroidtemplate"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17"
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    // 自定义算法实现依赖库
    implementation 'com.github.megatronking.stringfog:interface:1.1.0'
}
//https://github.com/mozilla/rust-android-gradle
cargo {
    module = "src/main/cpp/rust"
    targets = [
            "arm","arm64","x86","x86_64",
    ]
    profile = 'release'
    libname = "librust"
    prebuiltToolchains = true
    apiLevel =  30
    targetIncludes = ['librust.so']
}
afterEvaluate {
    // The `cargoBuild` task isn't available until after evaluation.
    android.applicationVariants.all { variant ->
        def productFlavor = ""
        variant.productFlavors.each {
            productFlavor += "${it.name.capitalize()}"
        }
        def buildType = "${variant.buildType.name.capitalize()}"
        tasks["generate${productFlavor}${buildType}Assets"].dependsOn(tasks["cargoBuild"])
    }
}
stringfog {
    // 这是加解密key，可以自由定义。
    key 'KNMG(看个锤子,我容易么???)'
    // 开关
    enable true
    // 加解密库的实现类路径，需和上面配置的加解密算法库一致。
    implementation 'com.jizhi.stringfog.CustomStringFogImpl'
    // 指定需加密的代码包路径，可配置多个，未指定将默认全部加密。
    fogPackages = ['com.jizhi.rustonandroidtemplate']
}